#ifndef _SECOND_ALLOC_
#define _SECOND_ALLOC_
#include "first_alloc"
//todo reallocate 
namespace yb {
	//some const values
	enum {_ALIGN = 8};
	enum {_MAX_BYTES = 128 };
	enum {_N_FREELISTS = _MAX_BYTES / _ALIGN };

	class _second_alloc {
	public:
		static void* allocate(size_t n);
		static void deallocate(void* p, size_t n);
		static void* reallocate(void* p, size_t old_sz, size_t new_sz);
	private:
		static size_t ROUND_UP(size_t bytes) { return (bytes + _ALIGN - 1) & ~(_ALIGN - 1); }
		union obj {
			union obj* free_list_link;
			//char client_data[1];
		};
		static obj* free_list[_N_FREELISTS];
		static size_t FREELIST_INDEX(size_t bytes) { return (bytes + _ALIGN - 1) / _ALIGN - 1 ; }
		static void* refill(size_t n);
		static char* chunk_alloc(size_t size, int& nobjs);
	
		static char* start_free;
		static char* end_free;
		static size_t heap_size;
	};

	char* _second_alloc::start_free = nullptr;
	char* _second_alloc::end_free = nullptr;
	size_t _second_alloc::heap_size = 0;
	_second_alloc::obj* _second_alloc::free_list[_N_FREELISTS] = { };

	void* _second_alloc::allocate(size_t n) {
		if (n > size_t (_MAX_BYTES)) {
			return (_first_alloc::allocate(n));
		} 
		obj** my_free_list;
		obj* result;
		my_free_list = free_list + FREELIST_INDEX(n);
		result = *my_free_list;
		if (result == nullptr) {
			void* r = refill(ROUND_UP(n));
			return r;
		}
		*my_free_list = result->free_list_link;
		return result;
	}

	void* _second_alloc::refill(size_t bytes) {
		int nobjs = 20;
		char* chunk = chunk_alloc(bytes, nobjs);
		if (nobjs == 1) return chunk;

		obj** my_free_list;
		obj* result = (obj*) chunk;
		obj* current_obj, *next_obj;
		
		//link the memory
		my_free_list = free_list + FREELIST_INDEX(bytes);
		*my_free_list = next_obj = (obj*)(chunk + bytes);
	
		for (int i = 1; ; i++) {
			current_obj = next_obj;
			next_obj = (obj*)((char*)next_obj + bytes);
			if (i == nobjs - 1) {
				current_obj->free_list_link = nullptr;
				break;
			} else {
				current_obj->free_list_link = next_obj;
			}
		}
		return result;
	}

	char* _second_alloc::chunk_alloc(size_t size, int& nobjs) {
		char* result;
		size_t total_bytes = size * nobjs;
		size_t bytes_left = end_free - start_free;
		//memory in pool is enough
		if (bytes_left >= total_bytes) {
			result = start_free;
			start_free += total_bytes;
			return result;
		}//not enough for total_bytes but enough for at least one size 
		else if (bytes_left >= size) {
			nobjs = bytes_left / size;
			total_bytes = nobjs * size;
			result = start_free;
			start_free += total_bytes;
			return result;
		} //not even enough for one size, then make good use of the rest memory
		else {
			size_t bytes_to_get = 2 * total_bytes + ROUND_UP(heap_size >> 4); 
			if (bytes_left > 0) {
				obj** my_free_list = free_list + FREELIST_INDEX(bytes_left);
				((obj*)start_free)->free_list_link = *my_free_list;
				*my_free_list = (obj*) start_free;
			}
		
			obj** my_free_list;
			obj* p;
			//try to get memory from free_list to memory pool
			for (int i = _MAX_BYTES; i >= size; i -= _ALIGN) {
				my_free_list = free_list + FREELIST_INDEX(i);
				p = *my_free_list;
				if (p != nullptr) {
					*my_free_list = p->free_list_link;
					start_free = (char*)p;
					end_free = start_free + i;
					return chunk_alloc(size, nobjs);
				}
			}
			//if that do not succeed, use malloc to get memory from os
			start_free = (char*) malloc(bytes_to_get);
			//if memory has run out, try using the first_alloc and it's oom_handler
			//we get memory successfully or exit the program
			if (start_free == nullptr) { start_free = (char*)_first_alloc::allocate(bytes_to_get); }
			//suppose we have got the memory we need
			end_free = start_free + bytes_to_get;
			heap_size += bytes_to_get;
			return chunk_alloc(size, nobjs);
		}
	}

	void _second_alloc::deallocate(void* p, size_t n) {
		obj* q = (obj*) p;
		obj** my_free_list;
		if (n > size_t(_MAX_BYTES)) {
			_first_alloc::deallocate(p, n);
			return;
		}
		//return memory to the free_list
		my_free_list = free_list + FREELIST_INDEX(n);
		q->free_list_link = *my_free_list;
		*my_free_list = q;
	}
}
		
#endif
